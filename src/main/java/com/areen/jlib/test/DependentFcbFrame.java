/**
 * Project: jlib Version: $Id: DependentFcbFrame.java 443 2012-07-17 11:32:42Z
 * Suganya $ License: SPL
 *
 * Authors (in chronological order): Suganya Nagarajan Contributors (in
 * chronological order): -
 */
package com.areen.jlib.test;

import com.areen.jlib.gui.ComboBoxLink;
import com.areen.jlib.gui.fcb.FilteredComboBox;
import com.areen.jlib.gui.fcb.FilteredComboBoxModel;
import com.areen.jlib.tuple.Pair;
import java.util.ArrayList;

/**
 * 
 * Just a Test APP.
 * 
 * Use this class to test the behaviour of the filtered 
 * comboboxes in which one of them is dependent on the other.
 * Test the behaviour of the child combobox when the model 
 * is changed dynamically according to the value picked 
 * in the parent combobox.
 *
 * @author suganya
 */
public class DependentFcbFrame extends javax.swing.JFrame {

    FilteredComboBoxModel countryModel = null;
    FilteredComboBoxModel dependentModel = null;
    String originalCountryKey = null;

    public static class FilteredCodeValue extends Pair<String, String> {

        public FilteredCodeValue(String argFirst, String argSecond) {
            super(argFirst, argSecond);
        }
    } // FilteredCodeValue class
    
    // Create and Intialise the FilteredCodeValue array.
    public static final FilteredCodeValue[] DTLS = new FilteredCodeValue[]{
        new FilteredCodeValue("aero1", "Air transport - 1"),
        new FilteredCodeValue("aero2", "Air transport - 2"), 
        new FilteredCodeValue("asia1", "Organisations and individuals in the Asia-Pacific region -1"),
        new FilteredCodeValue("asia2", "Organisations and individuals in the Asia-Pacific region - 2"), 
        new FilteredCodeValue("asia3", "Organisations and individuals in the Asia-Pacific region- 3"), 
        new FilteredCodeValue("biz1", "Business - 1"), new FilteredCodeValue("biz2", "Business - 2"), 
        new FilteredCodeValue("biz3", "Business - 3"), new FilteredCodeValue("cat1", "Catalan - 1"),
        new FilteredCodeValue("cat2", "Catalan - 2"), new FilteredCodeValue("cat3", "Catalan - 3")
    };

    /**
     * Creates new form DependentFcbFrame
     */
    public DependentFcbFrame() {
        // Intialize the models for both the combobox.
        countryModel = new FilteredComboBoxModel(Main.TLDS);
        dependentModel = new FilteredComboBoxModel(DTLS);

        initComponents();
        
        // Link the labels to the comboboxes accordingly.
        new ComboBoxLink(countryCombobox, countryLinkLabel);
        new ComboBoxLink(dependentCombobox, dependentLinkLabel);
        
        // Set the originalCountryKey with the country key picked when the frame loads.
        originalCountryKey = countryModel.getSelectedItem() != null
                && countryModel.getSelectedItem() instanceof Pair
                ? (((Pair) countryModel.getSelectedItem()).getFirst().toString())
                : countryModel.getSelectedItem() != null
                ? countryModel.getSelectedItem().toString() : null;

    } // DependentFcbFrame()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countryCombobox = new FilteredComboBox(countryModel);
        dependentCombobox = new FilteredComboBox(dependentModel);
        countryLinkLabel = new javax.swing.JLabel();
        dependentLinkLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        countryCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(countryCombobox, 0, 109, Short.MAX_VALUE)
                    .addComponent(dependentCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(countryLinkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addComponent(dependentLinkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(countryCombobox)
                    .addComponent(countryLinkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dependentCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dependentLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void countryComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboboxActionPerformed

        // Intialize the variables.
        String newCountry = null;      
        boolean comboSelection = false;
        ArrayList<Pair> newList = new ArrayList<Pair>();

        // Check evt for NULL and combobox changed.
        if (evt != null && "comboBoxChanged".equals(evt.getActionCommand())) {

            // Get the picked key.
            Object picked = countryModel.getPickedKey();
            if (picked != null) {
                
                // Set the new country picked.
                newCountry = countryModel.getPickedKey() != null
                        ? countryModel.getPickedKey().toString() : null;

                // comapre the new and the old value country value.
                if (!originalCountryKey.equalsIgnoreCase(newCountry)) {
                    //DEBUG: System.out.println("SELECT!! " + newSupplier + " " + originalSupplier);                  
                    comboSelection = true;
                } // if
            } // if
        } // if
        
        // Handle logic if a new country is picked.
        if (comboSelection) {
            
            // Set the country picked.
            String countryPicked = countryCombobox.getSelectedItem() != null
                    && countryCombobox.getSelectedItem() instanceof Pair
                    ? ((Pair) countryCombobox.getSelectedItem()).getFirst().toString() : null;
            if (countryPicked == null) {
                countryPicked = countryModel.getPickedKey().toString();
            } // if

            // Iterate through the FilteredCodeValue array.
            for (FilteredCodeValue codeValue : DTLS) {
                // System.out.println("Country picked == " + countryPicked + "------");              

                // Check the keys of the dependent combobox starts with the key of the country picked
                // and add them to the newList a list of Pairs.
                if (countryPicked != null 
                        && codeValue != null 
                        && codeValue.getFirst() != null
                        && codeValue.getFirst().startsWith(countryPicked)) {
                    newList.add(codeValue);
                } // if
            } // for

            // Create a new FCB Model and pass the new list obtained after new country picked.
            FilteredComboBoxModel newModel = new FilteredComboBoxModel(newList);
            
            // Add the new model to the dependent combobox.
            dependentCombobox.setModel(newModel);
            
            // Set the new model to the comboboxFilter as well, other wise it refers to the old model.
            ((FilteredComboBox) dependentCombobox).getComboBoxFilter().setModel(newModel);            

//            for (KeyListener listener : dependentCombobox.getEditor().getEditorComponent().getKeyListeners()) {
//                System.out.println("dependentCombobox Listeners ==== " + listener.toString());
//            } // for-each
//
//            for (KeyListener listener : countryCombobox.getEditor().getEditorComponent().getKeyListeners()) {
//                System.out.println("countryCombobox Listeners ==== " + listener.toString());
//            } // for-each

        } // if


    }//GEN-LAST:event_countryComboboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DependentFcbFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DependentFcbFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DependentFcbFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DependentFcbFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DependentFcbFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox countryCombobox;
    private javax.swing.JLabel countryLinkLabel;
    private javax.swing.JComboBox dependentCombobox;
    private javax.swing.JLabel dependentLinkLabel;
    // End of variables declaration//GEN-END:variables
}
// $Id: DependentFcbFrame.java 443 2012-07-17 11:32:42Z Suganya $